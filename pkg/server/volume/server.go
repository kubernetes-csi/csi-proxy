package volume

import (
	"context"
	"fmt"

	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/pkg/os/volume"
	internal "github.com/kubernetes-csi/csi-proxy/pkg/server/volume/impl"
	"k8s.io/klog/v2"
)

// Server wraps the host API and implements the autogenerated server interface
type Server struct {
	hostAPI volume.API
}

func NewServer(hostAPI volume.API) (*Server, error) {
	return &Server{
		hostAPI: hostAPI,
	}, nil
}

func (s *Server) ListVolumesOnDisk(context context.Context, request *internal.ListVolumesOnDiskRequest, version apiversion.Version) (*internal.ListVolumesOnDiskResponse, error) {
	klog.V(2).Infof("ListVolumesOnDisk: Request: %+v", request)
	response := &internal.ListVolumesOnDiskResponse{}

	volumeIDs, err := s.hostAPI.ListVolumesOnDisk(request.DiskNumber, request.PartitionNumber)
	if err != nil {
		klog.Errorf("failed ListVolumeOnDisk %v", err)
		return response, err
	}

	response.VolumeIds = volumeIDs
	return response, nil
}

func (s *Server) MountVolume(context context.Context, request *internal.MountVolumeRequest, version apiversion.Version) (*internal.MountVolumeResponse, error) {
	klog.V(2).Infof("MountVolume: Request: %+v", request)
	response := &internal.MountVolumeResponse{}

	volumeID := request.VolumeId
	if volumeID == "" {
		klog.Errorf("volume id empty")
		return response, fmt.Errorf("MountVolumeRequest.VolumeId is empty")
	}
	targetPath := request.TargetPath
	if targetPath == "" {
		klog.Errorf("targetPath empty")
		return response, fmt.Errorf("MountVolumeRequest.TargetPath is empty")
	}

	err := s.hostAPI.MountVolume(volumeID, targetPath)
	if err != nil {
		klog.Errorf("failed MountVolume %v", err)
		return response, err
	}
	return response, nil
}

func (s *Server) DismountVolume(context context.Context, request *internal.DismountVolumeRequest, version apiversion.Version) (*internal.DismountVolumeResponse, error) {
	unmountVolumeRequest := &internal.UnmountVolumeRequest{
		VolumeId:   request.VolumeId,
		TargetPath: request.Path,
	}
	_, err := s.UnmountVolume(context, unmountVolumeRequest, version)
	if err != nil {
		return nil, fmt.Errorf("Forward to UnmountVolume failed, err=%+v", err)
	}
	dismountVolumeResponse := &internal.DismountVolumeResponse{}
	return dismountVolumeResponse, nil
}

func (s *Server) UnmountVolume(context context.Context, request *internal.UnmountVolumeRequest, version apiversion.Version) (*internal.UnmountVolumeResponse, error) {
	klog.V(2).Infof("UnmountVolume: Request: %+v", request)
	response := &internal.UnmountVolumeResponse{}

	volumeID := request.VolumeId
	if volumeID == "" {
		klog.Errorf("volume id empty")
		return response, fmt.Errorf("volume id empty")
	}
	targetPath := request.TargetPath
	if targetPath == "" {
		klog.Errorf("target path empty")
		return response, fmt.Errorf("target path empty")
	}
	err := s.hostAPI.UnmountVolume(volumeID, targetPath)
	if err != nil {
		klog.Errorf("failed UnmountVolume %v", err)
		return response, err
	}
	return response, nil
}

func (s *Server) IsVolumeFormatted(context context.Context, request *internal.IsVolumeFormattedRequest, version apiversion.Version) (*internal.IsVolumeFormattedResponse, error) {
	klog.V(2).Infof("IsVolumeFormatted: Request: %+v", request)
	response := &internal.IsVolumeFormattedResponse{}

	volumeID := request.VolumeId
	if volumeID == "" {
		klog.Errorf("volume id empty")
		return response, fmt.Errorf("volume id empty")
	}
	isFormatted, err := s.hostAPI.IsVolumeFormatted(volumeID)
	if err != nil {
		klog.Errorf("failed IsVolumeFormatted %v", err)
		return response, err
	}
	klog.V(5).Infof("IsVolumeFormatted: return: %v", isFormatted)
	response.Formatted = isFormatted
	return response, nil
}

func (s *Server) FormatVolume(context context.Context, request *internal.FormatVolumeRequest, version apiversion.Version) (*internal.FormatVolumeResponse, error) {
	klog.V(2).Infof("FormatVolume: Request: %+v", request)
	response := &internal.FormatVolumeResponse{}

	volumeID := request.VolumeId
	if volumeID == "" {
		klog.Errorf("volume id empty")
		return response, fmt.Errorf("volume id empty")
	}

	err := s.hostAPI.FormatVolume(volumeID)
	if err != nil {
		klog.Errorf("failed FormatVolume %v", err)
		return response, err
	}
	return response, nil
}

func (s *Server) WriteVolumeCache(context context.Context, request *internal.WriteVolumeCacheRequest, version apiversion.Version) (*internal.WriteVolumeCacheResponse, error) {
	klog.V(2).Infof("WriteVolumeCache: Request: %+v", request)
	response := &internal.WriteVolumeCacheResponse{}

	volumeID := request.VolumeId
	if volumeID == "" {
		klog.Errorf("volume id empty")
		return response, fmt.Errorf("volume id empty")
	}

	err := s.hostAPI.WriteVolumeCache(volumeID)
	if err != nil {
		klog.Errorf("failed WriteVolumeCache %v", err)
		return response, err
	}
	return response, nil
}

func (s *Server) ResizeVolume(context context.Context, request *internal.ResizeVolumeRequest, version apiversion.Version) (*internal.ResizeVolumeResponse, error) {
	klog.V(2).Infof("ResizeVolume: Request: %+v", request)
	response := &internal.ResizeVolumeResponse{}

	volumeID := request.VolumeId
	if volumeID == "" {
		klog.Errorf("volume id empty")
		return response, fmt.Errorf("volume id empty")
	}
	sizeBytes := request.SizeBytes
	// TODO : Validate size param

	err := s.hostAPI.ResizeVolume(volumeID, sizeBytes)
	if err != nil {
		klog.Errorf("failed ResizeVolume %v", err)
		return response, err
	}
	return response, nil
}

func (s *Server) VolumeStats(context context.Context, request *internal.VolumeStatsRequest, version apiversion.Version) (*internal.VolumeStatsResponse, error) {
	minimumVersion := apiversion.NewVersionOrPanic("v1beta1")
	if version.Compare(minimumVersion) < 0 {
		return nil, fmt.Errorf("VolumeStats requires CSI-Proxy API version v1beta1 or greater")
	}

	getVolumeStatsRequest := &internal.GetVolumeStatsRequest{
		VolumeId: request.VolumeId,
	}
	getVolumeStatsResponse, err := s.GetVolumeStats(context, getVolumeStatsRequest, version)
	if err != nil {
		return nil, fmt.Errorf("Forward to GetVolumeStats failed, err=%+v", err)
	}
	volumeStatsResponse := &internal.VolumeStatsResponse{
		VolumeSize:     getVolumeStatsResponse.TotalBytes,
		VolumeUsedSize: getVolumeStatsResponse.UsedBytes,
	}
	return volumeStatsResponse, nil
}

func (s *Server) GetVolumeStats(context context.Context, request *internal.GetVolumeStatsRequest, version apiversion.Version) (*internal.GetVolumeStatsResponse, error) {
	klog.V(2).Infof("GetVolumeStats: Request: %+v", request)
	volumeID := request.VolumeId
	if volumeID == "" {
		return nil, fmt.Errorf("volume id empty")
	}

	totalBytes, usedBytes, err := s.hostAPI.GetVolumeStats(volumeID)
	if err != nil {
		klog.Errorf("failed GetVolumeStats %v", err)
		return nil, err
	}

	klog.V(2).Infof("VolumeStats: returned: Capacity %v Used %v", totalBytes, usedBytes)

	response := &internal.GetVolumeStatsResponse{
		TotalBytes: totalBytes,
		UsedBytes:  usedBytes,
	}

	return response, nil
}

func (s *Server) GetVolumeDiskNumber(context context.Context, request *internal.VolumeDiskNumberRequest, version apiversion.Version) (*internal.VolumeDiskNumberResponse, error) {
	minimumVersion := apiversion.NewVersionOrPanic("v1beta1")
	if version.Compare(minimumVersion) < 0 {
		return nil, fmt.Errorf("GetVolumeDiskNumber requires CSI-Proxy API version v1beta1 or greater")
	}

	getDiskNumberFromVolumeIDRequest := &internal.GetDiskNumberFromVolumeIDRequest{
		VolumeId: request.VolumeId,
	}
	getDiskNumberFromVolumeIDResponse, err := s.GetDiskNumberFromVolumeID(context, getDiskNumberFromVolumeIDRequest, version)
	if err != nil {
		return nil, fmt.Errorf("Forward to GetDiskNumberFromVolumeID failed, err=%+v", err)
	}
	volumeStatsResponse := &internal.VolumeDiskNumberResponse{
		DiskNumber: int64(getDiskNumberFromVolumeIDResponse.DiskNumber),
	}
	return volumeStatsResponse, nil
}

func (s *Server) GetDiskNumberFromVolumeID(context context.Context, request *internal.GetDiskNumberFromVolumeIDRequest, version apiversion.Version) (*internal.GetDiskNumberFromVolumeIDResponse, error) {
	klog.V(2).Infof("GetDiskNumberFromVolumeID: Request: %+v", request)

	volumeId := request.VolumeId
	if volumeId == "" {
		return nil, fmt.Errorf("volume id empty")
	}

	diskNumber, err := s.hostAPI.GetDiskNumberFromVolumeID(volumeId)
	if err != nil {
		klog.Errorf("failed GetDiskNumberFromVolumeID %v", err)
		return nil, err
	}

	response := &internal.GetDiskNumberFromVolumeIDResponse{
		DiskNumber: diskNumber,
	}

	return response, nil
}

func (s *Server) GetVolumeIDFromMount(context context.Context, request *internal.VolumeIDFromMountRequest, version apiversion.Version) (*internal.VolumeIDFromMountResponse, error) {
	minimumVersion := apiversion.NewVersionOrPanic("v1beta1")
	if version.Compare(minimumVersion) < 0 {
		return nil, fmt.Errorf("GetVolumeIDFromMount requires CSI-Proxy API version v1beta1 or greater")
	}

	getVolumeIDFromTargetPathRequest := &internal.GetVolumeIDFromTargetPathRequest{
		TargetPath: request.Mount,
	}
	getVolumeIDFromTargetPathResponse, err := s.GetVolumeIDFromTargetPath(context, getVolumeIDFromTargetPathRequest, version)
	if err != nil {
		return nil, fmt.Errorf("Forward to GetVolumeIDFromTargetPath failed, err=%+v", err)
	}
	volumeIDFromMountResponse := &internal.VolumeIDFromMountResponse{
		VolumeId: getVolumeIDFromTargetPathResponse.VolumeId,
	}
	return volumeIDFromMountResponse, nil
}

func (s *Server) GetVolumeIDFromTargetPath(context context.Context, request *internal.GetVolumeIDFromTargetPathRequest, version apiversion.Version) (*internal.GetVolumeIDFromTargetPathResponse, error) {
	klog.V(2).Infof("GetVolumeIDFromTargetPath: Request: %+v", request)

	targetPath := request.TargetPath
	if targetPath == "" {
		return nil, fmt.Errorf("target path is empty")
	}

	volume, err := s.hostAPI.GetVolumeIDFromTargetPath(targetPath)
	if err != nil {
		klog.Errorf("failed GetVolumeIDFromTargetPath: %v", err)
		return nil, err
	}

	response := &internal.GetVolumeIDFromTargetPathResponse{
		VolumeId: volume,
	}

	return response, nil
}

func (s *Server) GetClosestVolumeIDFromTargetPath(context context.Context, request *internal.GetClosestVolumeIDFromTargetPathRequest, version apiversion.Version) (*internal.GetClosestVolumeIDFromTargetPathResponse, error) {
	klog.V(2).Infof("GetClosestVolumeIDFromTargetPath: Request: %+v", request)

	targetPath := request.TargetPath
	if targetPath == "" {
		return nil, fmt.Errorf("target path is empty")
	}

	volume, err := s.hostAPI.GetClosestVolumeIDFromTargetPath(targetPath)
	if err != nil {
		klog.Errorf("failed GetClosestVolumeIDFromTargetPath: %v", err)
		return nil, err
	}

	response := &internal.GetClosestVolumeIDFromTargetPathResponse{
		VolumeId: volume,
	}

	return response, nil
}
