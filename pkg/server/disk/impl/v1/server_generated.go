// Code generated by csi-proxy-api-gen. DO NOT EDIT.

package v1

import (
	"context"

	"github.com/kubernetes-csi/csi-proxy/client/api/disk/v1"
	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/pkg/server/disk/impl"
	"google.golang.org/grpc"
)

var version = apiversion.NewVersionOrPanic("v1")

type versionedAPI struct {
	apiGroupServer impl.ServerInterface
}

func NewVersionedServer(apiGroupServer impl.ServerInterface) impl.VersionedAPI {
	return &versionedAPI{
		apiGroupServer: apiGroupServer,
	}
}

func (s *versionedAPI) Register(grpcServer *grpc.Server) {
	v1.RegisterDiskServer(grpcServer, s)
}

func (s *versionedAPI) GetDiskState(context context.Context, versionedRequest *v1.GetDiskStateRequest) (*v1.GetDiskStateResponse, error) {
	request := &impl.GetDiskStateRequest{}
	if err := Convert_v1_GetDiskStateRequest_To_impl_GetDiskStateRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.GetDiskState(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.GetDiskStateResponse{}
	if err := Convert_impl_GetDiskStateResponse_To_v1_GetDiskStateResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) GetDiskStats(context context.Context, versionedRequest *v1.GetDiskStatsRequest) (*v1.GetDiskStatsResponse, error) {
	request := &impl.GetDiskStatsRequest{}
	if err := Convert_v1_GetDiskStatsRequest_To_impl_GetDiskStatsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.GetDiskStats(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.GetDiskStatsResponse{}
	if err := Convert_impl_GetDiskStatsResponse_To_v1_GetDiskStatsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ListDiskIDs(context context.Context, versionedRequest *v1.ListDiskIDsRequest) (*v1.ListDiskIDsResponse, error) {
	request := &impl.ListDiskIDsRequest{}
	if err := Convert_v1_ListDiskIDsRequest_To_impl_ListDiskIDsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListDiskIDs(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.ListDiskIDsResponse{}
	if err := Convert_impl_ListDiskIDsResponse_To_v1_ListDiskIDsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ListDiskLocations(context context.Context, versionedRequest *v1.ListDiskLocationsRequest) (*v1.ListDiskLocationsResponse, error) {
	request := &impl.ListDiskLocationsRequest{}
	if err := Convert_v1_ListDiskLocationsRequest_To_impl_ListDiskLocationsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListDiskLocations(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.ListDiskLocationsResponse{}
	if err := Convert_impl_ListDiskLocationsResponse_To_v1_ListDiskLocationsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) PartitionDisk(context context.Context, versionedRequest *v1.PartitionDiskRequest) (*v1.PartitionDiskResponse, error) {
	request := &impl.PartitionDiskRequest{}
	if err := Convert_v1_PartitionDiskRequest_To_impl_PartitionDiskRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.PartitionDisk(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.PartitionDiskResponse{}
	if err := Convert_impl_PartitionDiskResponse_To_v1_PartitionDiskResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) Rescan(context context.Context, versionedRequest *v1.RescanRequest) (*v1.RescanResponse, error) {
	request := &impl.RescanRequest{}
	if err := Convert_v1_RescanRequest_To_impl_RescanRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.Rescan(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.RescanResponse{}
	if err := Convert_impl_RescanResponse_To_v1_RescanResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) SetDiskState(context context.Context, versionedRequest *v1.SetDiskStateRequest) (*v1.SetDiskStateResponse, error) {
	request := &impl.SetDiskStateRequest{}
	if err := Convert_v1_SetDiskStateRequest_To_impl_SetDiskStateRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.SetDiskState(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.SetDiskStateResponse{}
	if err := Convert_impl_SetDiskStateResponse_To_v1_SetDiskStateResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}
