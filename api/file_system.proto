syntax = "proto3";

package api;

import "errors.proto";

service FileSystemCSIProxyService {
    // PathExists checks if the given path exists on the host.
    rpc PathExists(PathExistsRequest) returns (PathExistsResponse) {}

    // Mkdir creates a directory at the requested path on the host.
    rpc Mkdir(MkdirRequest) returns (MkdirResponse) {}

    // Rmdir removes the directory at the requested path on the host.
    // This may be used for unlinking a symlink created through LinkVolume.
    rpc Rmdir(RmdirRequest) returns (RmdirResponse) {}

    // LinkPath invokes mklink on the global staging path of a volume linking it to a path within a container.
    rpc LinkPath(LinkPathRequest) returns (LinkPathResponse) {}
}

message PathExistsRequest {
     // The path to check in the host filesystem.
     string path = 1;
}

message PathExistsResponse {
    bool success = 1;

    oneof error {
        CmdletError cmdlet_error = 2;
        string error_message = 3;
    }

    bool exists = 4;
}

// Context of the paths used for path prefix validation
enum PathContext {
    // plugin maps to the configured kubelet-csi-plugins-path path prefix
    PLUGIN = 0;
    // container maps to the configured kubelet-pod-path path prefix
    CONTAINER = 1;
}

message MkdirRequest {
    // The path to create in the host filesystem.
    // All special characters allowed by Windows in path names will be allowed
    // except for restrictions noted below. For details, please check:
    // https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
    // Non-existent parent directories in the path will NOT be created.
    // Directories will be created with Read and Write privileges of the Windows
    // User account under which csi-proxy is started (typically LocalSystem).
    //
    // Restrictions:
    // If given an absolute path, it needs to be under kubelet-csi-plugins-path
    // or kubelet-pod-path - based on context, and be specified with drive letter
    // prefix: e.g., "X:\".
    // If given a relative path, it will be understood as being relative to either
    // kubelet-csi-plugins-path or kubelet-pod-path - again based on context.
    // Cannot already exist on host.
    // UNC paths of the form "\\server\share\path\file" are not allowed.
    // All directory separators need to be backslash character: "\".
    // Characters: .. / : | ? * in the path are not allowed.
    // Maximum path length will be capped to 260 characters (MAX_PATH).
    string path = 1;

    // Context of the path creation used for path prefix validation
    PathContext context = 2;
}

message MkdirResponse {
    bool success = 1;

    oneof error {
        CmdletError cmdlet_error = 2;
        string error_message = 3;
    }
}

message RmdirRequest {
    // The path to remove in the host filesystem
    // All special characters allowed by Windows in path names will be allowed
    // except for restrictions noted below. For details, please check:
    // https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
    //
    // Restrictions:
    // If given an absolute path, it needs to be under kubelet-csi-plugins-path
    // or kubelet-pod-path - based on context, and be specified with drive letter
    // prefix: e.g., "X:\".
    // If given a relative path, it will be understood as being relative to either
    // kubelet-csi-plugins-path or kubelet-pod-path - again based on context.
    // UNC paths of the form "\\server\share\path\file" are not allowed.
    // All directory separators need to be backslash character: "\".
    // Characters: .. / : | ? * in the path are not allowed.
    // Path cannot be a file of type symlink.
    // Path needs to be a directory that is empty.
    // Maximum path length will be capped to 260 characters (MAX_PATH).
    string path = 1;

    // Context of the path creation used for path prefix validation
    PathContext context = 2;
}

message RmdirResponse {
    bool success = 1;

    oneof error {
        CmdletError cmdlet_error = 2;
        string error_message = 3;
    }
}

message LinkPathRequest {
    // Source of MkLink call to Windows
    // All special characters allowed by Windows in path names will be allowed
    // except for restrictions noted below. For details, please check:
    // https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
    //
    // Restrictions:
    // If given an absolute path, it needs to be under kubelet-pod-path,
    // and specified with drive letter prefix: "X:\".
    // If given a relative path, it will be understood as being relative to
    // kubelet-pod-path.
    // Needs to already exist on host.
    // UNC paths of the form "\\server\share\path\file" are not allowed.
    // All directory separators need to be backslash character: "\".
    // Characters: .. / : | ? * in the path are not allowed.
    // Maximum path length will be capped to 260 characters (MAX_PATH).
    string source_path = 1;

    // Target of MkLink call to Windows
    // All special characters allowed by Windows in path names will be allowed
    // except for restrictions noted below. For details, please check:
    // https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
    //
    // Restrictions:
    // If given an absolute path, it needs to be under kubelet-csi-plugins-path,
    // and specified with drive letter prefix: "X:\".
    // If given a relative path, it will be understood as being relative to
    // kubelet-csi-plugins-path.
    // UNC paths of the form "\\server\share\path\file" are not allowed.
    // All directory separators need to be backslash character: "\".
    // Characters: .. / : | ? * in the path are not allowed.
    // Maximum path length will be capped to 260 characters (MAX_PATH).
    string target_path = 2;
}

message LinkPathResponse {
    bool success = 1;

    oneof error {
        CmdletError cmdlet_error = 2;
        string error_message = 3;
    }
}
