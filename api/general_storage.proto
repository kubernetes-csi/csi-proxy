syntax = "proto3";

package api;

import "errors.proto";

service GeneralStorageCSIProxyService {
    // Rescan refreshes the host storage cache.
    rpc Rescan(RescanRequest) returns (RescanResponse) {}

    // PartitionDisk initializes and partitions a disk device (if the disk has not
    // been partitioned already) and returns the resulting volume object's GUID.
    rpc PartitionDisk(PartitionDiskRequest) returns (PartitionDiskResponse) {}

    // FormatVolume formats a volume with the provided file system.
    // The resulting volume is mounted at the requested global staging path.
    rpc FormatVolume(FormatVolumeRequest) returns (FormatVolumeResponse) {}

    // ListDiskLocations returns locations <Adapter, Bus, Target, LUN ID> of all disk devices enumerated by Windows.
    // This maps to invoking the Get-Disk cmdlet and looking at standard disk fields as done at
    // https://github.com/kubernetes/kubernetes/blob/v1.16.0-rc.1/pkg/volume/azure_dd/azure_common_windows.go#L42
    rpc ListDiskLocations(ListDiskLocationsRequest) returns (ListDiskLocationsResponse) {}

    // ListDisks returns info (from IOCTL_STORAGE_QUERY_PROPERTY) about all disk devices enumerated by Windows.
    // This maps to invoking scsi_id in Linux as done at
    // https://github.com/kubernetes/kubernetes/blob/v1.16.0-rc.1/pkg/volume/gcepd/gce_util.go#L232
    // as well as what Get-GcePdName achieves internally when invoked through:
    // https://github.com/kubernetes/kubernetes/blob/v1.16.0-rc.1/pkg/volume/gcepd/attacher.go#L182.
    // All SCSI Page 83 IDs (along with other IDs) for all disk devices will be returned here.
    rpc ListDisks(ListDisksRequest) returns (ListDisksResponse) {}

    // ListDiskVolumeMappings returns a map of all disk devices and volumes GUIDs.
    // This allows obtaining a mapping of volume device GUIDs as enumerated by Windows to the disk device
    // objects backing the volumes. This information may be used by a block based CSI driver to enumerate
    // the volume devices hosted on a disk (published by the CSI attacher). The volume device GUID for a
    // volume can be passed to MountBlockVolume to mount the volume at the desired global staging path.
    rpc ListDiskVolumeMappings(ListDiskVolumeMappingsRequest) returns (ListDiskVolumeMappingsResponse) {}

    // ResizeVolume performs resizing of the partition and file system for a block based volume
    rpc ResizeVolume(ResizeVolumeRequest) returns (ResizeVolumeResponse) {}

    // MountVolume mounts a volume.
    rpc MountVolume(MountVolumeRequest) returns (MountVolumeResponse) {}

    // DismountVolume gracefully dismounts a volume.
    rpc DismountVolume(DismountVolumeRequest) returns (DismountVolumeResponse) {}
}

message RescanRequest {
    // Intentionally empty.
}

message RescanResponse {
    bool success = 1;

    oneof error {
        CmdletError cmdlet_error = 2;
        string error_message = 3;
    }
}

message PartitionDiskRequest {
    // The Windows disk device to partition and the paritioning mode: MBR/GPT.
    // The whole disk will be partitioned.
    //
    // Restrictions:
    // disk_number should be less than the maximum number drives allowed by Windows OS.
    uint32 disk_number = 1;

    // Disk partition type
    enum PartitionType {
        MBR = 0;
        GPT = 1;
    }
    PartitionType type = 2;
}

message PartitionDiskResponse {
    bool success = 1;

    oneof error {
        CmdletError cmdlet_error = 2;
        string error_message = 3;
    }

    // GUID of the volume device resulting from the partition.
    string volume_device_guid = 4;
}

message FormatVolumeRequest {
    // The GUID of the Windows volume device to format,
    // typically volume_device_guid returned by PartitionDiskResponse.
    string volume_device_guid = 1;

    // FileSystem type
    enum FileSystemType {
        NTFS = 0;
        FAT = 1;
    }
    FileSystemType type = 2;
}

message FormatVolumeResponse {
    bool success = 1;

    oneof error {
        CmdletError cmdlet_error = 2;
        string error_message = 3;
    }
}

message ListDiskLocationsRequest {
    // Intentionally empty
}

message DiskLocation {
    string Adapter = 1;
    string Bus = 2;
    string Target = 3;
    string LUNID = 4;
}

message ListDiskLocationsResponse {
    bool success = 1;

    oneof error {
        WindowsApiError windows_api_error = 2;
        string error_message = 3;
    }

    // Map of disk device objects and <adapter, bus, target, lun ID> associated with each disk device
    map <string, DiskLocation> disk_locations = 4;
}

message ListDisksRequest {
    // Intentionally empty
}

enum DiskType {
    Page0x80 = 0;
    Page0x83 = 1;
    WindowsOS = 3;
}

message Disk {
    string ID = 1;

    DiskType type = 2;

    // metadata depends on the disk type:
    //  * for Page0x83 disks, it's the VPD descriptor
    //  * for other types, it's empty
    string metadata = 3;
}

message Disks {
    repeated Disk disks = 1;
}

message ListDisksResponse {
    bool success = 1;

    oneof error {
        WindowsApiError windows_api_error = 2;
        string error_message = 3;
    }

    // Map of disk device objects and the data associated with each disk device.
    map <string, Disks> disk_id = 4;
}

message ListDiskVolumeMappingsRequest {
    // Intentionally empty
}

message ListDiskVolumeMappingsResponse {
    bool success = 1;

    oneof error {
        CmdletError cmdlet_error = 2;
        string error_message = 3;
    }

    // Map of disk devices and volume objects of the form \\?\volume\{GUID} on the disk.
    map <string, string> disk_volume_pair = 4;
}

message ResizeVolumeRequest {
    // The GUID of the Windows volume device to format,
    // typically volume_device_guid returned by PartitionDiskResponse.
    string volume_device_guid = 1;

    // New size to resize FS to.
    uint64 new_size = 2;
}

message ResizeVolumeResponse {
    bool success = 1;

    oneof error {
        CmdletError cmdlet_error = 2;
        string error_message = 3;
    }
}

message MountVolumeRequest {
    // The GUID of the Windows volume device to format,
    // typically volume_device_guid returned by PartitionDiskResponse.
    string volume_device_guid = 1;

    // Local path in the host to stage the volume.
    // All special characters allowed by Windows in path names will be allowed
    // except for restrictions noted below. For details, please check:
    // https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
    //
    // Restrictions:
    // If given an absolute path, it needs to be under kubelet-csi-plugins-path,
    // and specified with drive letter prefix: "C:\".
    // If given a relative path, it will be understood as being relative to
    // kubelet-csi-plugins-path.
    // UNC paths of the form "\\server\share\path\file" are not allowed.
    // All directory separators need to be backslash character: "\".
    // Characters: .. / : | ? * in the path are not allowed.
    // Maximum path length will be capped to 260 characters (MAX_PATH).
    string host_path = 2;

    bool readonly = 3;
}

message MountVolumeResponse {
    bool success = 1;

    oneof error {
        CmdletError cmdlet_error = 2;
        string error_message = 3;
    }
}

message DismountVolumeRequest {
    // The GUID of the Windows volume device to format,
    // typically volume_device_guid returned by PartitionDiskResponse.
    string volume_device_guid = 1;
}

message DismountVolumeResponse {
    bool success = 1;

    oneof error {
        CmdletError cmdlet_error = 2;
        string error_message = 3;
    }
}
