// Code generated by protoc-gen-go. DO NOT EDIT.
// source: smb.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MountSMBShareRequest struct {
	// A remote SMB share to mount
	// All unicode characters allowed in SMB server name specifications are
	// permitted except for restrictions below
	//
	// Restrictions:
	// SMB share specified in the format: \\server-name\sharename, \\server.fqdn\sharename or \\a.b.c.d\sharename
	// If not an IP address, server-name has to be a valid DNS name.
	// UNC specifications to local paths or prefix: \\?\ is not allowed.
	// Characters: + [ ] " / : ; | < > , ? * = $ are not allowed.
	RemoteShare string `protobuf:"bytes,1,opt,name=remote_share,json=remoteShare,proto3" json:"remote_share,omitempty"`
	// Local path in the host to stage the SMB share.
	// All special characters allowed by Windows in path names will be allowed
	// except for restrictions noted below. For details, please check:
	// https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
	//
	// Restrictions:
	// If given an absolute path, it needs to be under kubelet-csi-plugins-path,
	// and specified with drive letter prefix: "X:\".
	// If given a relative path, it will be understood as being relative to
	// kubelet-csi-plugins-path.
	// Needs to already exist on host.
	// UNC paths of the form "\\server\share\path\file" are not allowed.
	// All directory separators need to be backslash character: "\".
	// Characters: .. / : | ? * in the path are not allowed.
	// Maximum path length will be capped to 260 characters (MAX_PATH).
	HostPath string `protobuf:"bytes,2,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	// Mount the share read-only.
	Readonly bool `protobuf:"varint,3,opt,name=readonly,proto3" json:"readonly,omitempty"`
	// Username credential associated with the share.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// Password credential associated with the share.
	Password             string   `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MountSMBShareRequest) Reset()         { *m = MountSMBShareRequest{} }
func (m *MountSMBShareRequest) String() string { return proto.CompactTextString(m) }
func (*MountSMBShareRequest) ProtoMessage()    {}
func (*MountSMBShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_578488a9f93afe3f, []int{0}
}

func (m *MountSMBShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MountSMBShareRequest.Unmarshal(m, b)
}
func (m *MountSMBShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MountSMBShareRequest.Marshal(b, m, deterministic)
}
func (m *MountSMBShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MountSMBShareRequest.Merge(m, src)
}
func (m *MountSMBShareRequest) XXX_Size() int {
	return xxx_messageInfo_MountSMBShareRequest.Size(m)
}
func (m *MountSMBShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MountSMBShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MountSMBShareRequest proto.InternalMessageInfo

func (m *MountSMBShareRequest) GetRemoteShare() string {
	if m != nil {
		return m.RemoteShare
	}
	return ""
}

func (m *MountSMBShareRequest) GetHostPath() string {
	if m != nil {
		return m.HostPath
	}
	return ""
}

func (m *MountSMBShareRequest) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

func (m *MountSMBShareRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *MountSMBShareRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type MountSMBShareResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Types that are valid to be assigned to Error:
	//	*MountSMBShareResponse_CmdletError
	//	*MountSMBShareResponse_ErrorMessage
	Error                isMountSMBShareResponse_Error `protobuf_oneof:"error"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *MountSMBShareResponse) Reset()         { *m = MountSMBShareResponse{} }
func (m *MountSMBShareResponse) String() string { return proto.CompactTextString(m) }
func (*MountSMBShareResponse) ProtoMessage()    {}
func (*MountSMBShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_578488a9f93afe3f, []int{1}
}

func (m *MountSMBShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MountSMBShareResponse.Unmarshal(m, b)
}
func (m *MountSMBShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MountSMBShareResponse.Marshal(b, m, deterministic)
}
func (m *MountSMBShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MountSMBShareResponse.Merge(m, src)
}
func (m *MountSMBShareResponse) XXX_Size() int {
	return xxx_messageInfo_MountSMBShareResponse.Size(m)
}
func (m *MountSMBShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MountSMBShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MountSMBShareResponse proto.InternalMessageInfo

func (m *MountSMBShareResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type isMountSMBShareResponse_Error interface {
	isMountSMBShareResponse_Error()
}

type MountSMBShareResponse_CmdletError struct {
	CmdletError *CmdletError `protobuf:"bytes,2,opt,name=cmdlet_error,json=cmdletError,proto3,oneof"`
}

type MountSMBShareResponse_ErrorMessage struct {
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3,oneof"`
}

func (*MountSMBShareResponse_CmdletError) isMountSMBShareResponse_Error() {}

func (*MountSMBShareResponse_ErrorMessage) isMountSMBShareResponse_Error() {}

func (m *MountSMBShareResponse) GetError() isMountSMBShareResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *MountSMBShareResponse) GetCmdletError() *CmdletError {
	if x, ok := m.GetError().(*MountSMBShareResponse_CmdletError); ok {
		return x.CmdletError
	}
	return nil
}

func (m *MountSMBShareResponse) GetErrorMessage() string {
	if x, ok := m.GetError().(*MountSMBShareResponse_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MountSMBShareResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MountSMBShareResponse_CmdletError)(nil),
		(*MountSMBShareResponse_ErrorMessage)(nil),
	}
}

type UnmountSMBShareRequest struct {
	// Local host path at which the SMB share was previously staged.
	//
	// Restrictions:
	// If given an absolute path, it needs to be under kubelet-csi-plugins-path,
	// and specified with drive letter prefix: "X:\".
	// If given a relative path, it will be understood as being relative to
	// kubelet-csi-plugins-path.
	HostPath             string   `protobuf:"bytes,1,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnmountSMBShareRequest) Reset()         { *m = UnmountSMBShareRequest{} }
func (m *UnmountSMBShareRequest) String() string { return proto.CompactTextString(m) }
func (*UnmountSMBShareRequest) ProtoMessage()    {}
func (*UnmountSMBShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_578488a9f93afe3f, []int{2}
}

func (m *UnmountSMBShareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnmountSMBShareRequest.Unmarshal(m, b)
}
func (m *UnmountSMBShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnmountSMBShareRequest.Marshal(b, m, deterministic)
}
func (m *UnmountSMBShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnmountSMBShareRequest.Merge(m, src)
}
func (m *UnmountSMBShareRequest) XXX_Size() int {
	return xxx_messageInfo_UnmountSMBShareRequest.Size(m)
}
func (m *UnmountSMBShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnmountSMBShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnmountSMBShareRequest proto.InternalMessageInfo

func (m *UnmountSMBShareRequest) GetHostPath() string {
	if m != nil {
		return m.HostPath
	}
	return ""
}

type UnmountSMBShareResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Types that are valid to be assigned to Error:
	//	*UnmountSMBShareResponse_CmdletError
	//	*UnmountSMBShareResponse_ErrorMessage
	Error                isUnmountSMBShareResponse_Error `protobuf_oneof:"error"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UnmountSMBShareResponse) Reset()         { *m = UnmountSMBShareResponse{} }
func (m *UnmountSMBShareResponse) String() string { return proto.CompactTextString(m) }
func (*UnmountSMBShareResponse) ProtoMessage()    {}
func (*UnmountSMBShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_578488a9f93afe3f, []int{3}
}

func (m *UnmountSMBShareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnmountSMBShareResponse.Unmarshal(m, b)
}
func (m *UnmountSMBShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnmountSMBShareResponse.Marshal(b, m, deterministic)
}
func (m *UnmountSMBShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnmountSMBShareResponse.Merge(m, src)
}
func (m *UnmountSMBShareResponse) XXX_Size() int {
	return xxx_messageInfo_UnmountSMBShareResponse.Size(m)
}
func (m *UnmountSMBShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnmountSMBShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnmountSMBShareResponse proto.InternalMessageInfo

func (m *UnmountSMBShareResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type isUnmountSMBShareResponse_Error interface {
	isUnmountSMBShareResponse_Error()
}

type UnmountSMBShareResponse_CmdletError struct {
	CmdletError *CmdletError `protobuf:"bytes,2,opt,name=cmdlet_error,json=cmdletError,proto3,oneof"`
}

type UnmountSMBShareResponse_ErrorMessage struct {
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3,oneof"`
}

func (*UnmountSMBShareResponse_CmdletError) isUnmountSMBShareResponse_Error() {}

func (*UnmountSMBShareResponse_ErrorMessage) isUnmountSMBShareResponse_Error() {}

func (m *UnmountSMBShareResponse) GetError() isUnmountSMBShareResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *UnmountSMBShareResponse) GetCmdletError() *CmdletError {
	if x, ok := m.GetError().(*UnmountSMBShareResponse_CmdletError); ok {
		return x.CmdletError
	}
	return nil
}

func (m *UnmountSMBShareResponse) GetErrorMessage() string {
	if x, ok := m.GetError().(*UnmountSMBShareResponse_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UnmountSMBShareResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UnmountSMBShareResponse_CmdletError)(nil),
		(*UnmountSMBShareResponse_ErrorMessage)(nil),
	}
}

func init() {
	proto.RegisterType((*MountSMBShareRequest)(nil), "api.MountSMBShareRequest")
	proto.RegisterType((*MountSMBShareResponse)(nil), "api.MountSMBShareResponse")
	proto.RegisterType((*UnmountSMBShareRequest)(nil), "api.UnmountSMBShareRequest")
	proto.RegisterType((*UnmountSMBShareResponse)(nil), "api.UnmountSMBShareResponse")
}

func init() { proto.RegisterFile("smb.proto", fileDescriptor_578488a9f93afe3f) }

var fileDescriptor_578488a9f93afe3f = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x92, 0xcf, 0x4e, 0xea, 0x40,
	0x14, 0xc6, 0x99, 0xcb, 0xe5, 0xd2, 0x1e, 0x20, 0xd7, 0x4c, 0xfc, 0x53, 0x8b, 0x0b, 0x6c, 0x62,
	0xc2, 0x8a, 0x05, 0x86, 0x17, 0x80, 0x98, 0xe0, 0x02, 0x43, 0xda, 0xb8, 0x6e, 0x86, 0x72, 0x62,
	0x49, 0x68, 0xa7, 0xce, 0x99, 0xaa, 0xbc, 0x89, 0xf1, 0x11, 0x5c, 0xf8, 0x8c, 0xa6, 0xd3, 0x54,
	0x03, 0xf6, 0x01, 0x5c, 0x7e, 0xdf, 0x6f, 0x4e, 0x7b, 0xbe, 0x6f, 0x06, 0x6c, 0x4a, 0x56, 0xa3,
	0x4c, 0x49, 0x2d, 0x79, 0x53, 0x64, 0x1b, 0xb7, 0x8b, 0x4a, 0x49, 0x45, 0xa5, 0xe5, 0xbd, 0x33,
	0x38, 0x5e, 0xc8, 0x3c, 0xd5, 0xc1, 0x62, 0x1a, 0xc4, 0x42, 0xa1, 0x8f, 0x8f, 0x39, 0x92, 0xe6,
	0x97, 0xd0, 0x55, 0x98, 0x48, 0x8d, 0x21, 0x15, 0xb6, 0xc3, 0x06, 0x6c, 0x68, 0xfb, 0x9d, 0xd2,
	0x33, 0x27, 0x79, 0x1f, 0xec, 0x58, 0x92, 0x0e, 0x33, 0xa1, 0x63, 0xe7, 0x8f, 0xe1, 0x56, 0x61,
	0x2c, 0x85, 0x8e, 0xb9, 0x0b, 0x96, 0x42, 0xb1, 0x96, 0xe9, 0x76, 0xe7, 0x34, 0x07, 0x6c, 0x68,
	0xf9, 0x5f, 0xba, 0x60, 0x39, 0xa1, 0x4a, 0x45, 0x82, 0xce, 0xdf, 0x72, 0xae, 0xd2, 0x05, 0xcb,
	0x04, 0xd1, 0xb3, 0x54, 0x6b, 0xa7, 0x55, 0xb2, 0x4a, 0x7b, 0xaf, 0x0c, 0x4e, 0x0e, 0x96, 0xa5,
	0x4c, 0xa6, 0x84, 0xdc, 0x81, 0x36, 0xe5, 0x51, 0x84, 0x44, 0x66, 0x51, 0xcb, 0xaf, 0x24, 0x9f,
	0x40, 0x37, 0x4a, 0xd6, 0x5b, 0xd4, 0xa1, 0xc9, 0x6d, 0xf6, 0xec, 0x8c, 0x8f, 0x46, 0x22, 0xdb,
	0x8c, 0x66, 0x06, 0xdc, 0x14, 0xfe, 0xbc, 0xe1, 0x77, 0xa2, 0x6f, 0xc9, 0xaf, 0xa0, 0x67, 0xce,
	0x87, 0x09, 0x12, 0x89, 0x07, 0x34, 0x19, 0xec, 0x79, 0xc3, 0x2f, 0xeb, 0x5b, 0x94, 0xee, 0xb4,
	0x0d, 0x2d, 0xa3, 0xbd, 0x09, 0x9c, 0xde, 0xa7, 0x49, 0x5d, 0x91, 0x7b, 0x2d, 0xb1, 0xfd, 0x96,
	0xbc, 0x37, 0x06, 0x67, 0x3f, 0xe6, 0x7e, 0x49, 0xa6, 0xf1, 0x07, 0x03, 0x1e, 0x24, 0xab, 0x59,
	0x70, 0xbb, 0x54, 0xf2, 0x65, 0x17, 0xa0, 0x7a, 0xda, 0x44, 0xc8, 0xe7, 0xd0, 0xdb, 0xbb, 0x04,
	0x7e, 0x6e, 0x7e, 0x5c, 0xf7, 0x8a, 0x5c, 0xb7, 0x0e, 0x95, 0xf9, 0xbc, 0x06, 0xbf, 0x83, 0xff,
	0x07, 0xe1, 0x79, 0xdf, 0x0c, 0xd4, 0x57, 0xe9, 0x5e, 0xd4, 0xc3, 0xea, 0x7b, 0xab, 0x7f, 0xe6,
	0x4d, 0x5f, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x91, 0x75, 0x02, 0x1d, 0xf3, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SmbCSIProxyServiceClient is the client API for SmbCSIProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SmbCSIProxyServiceClient interface {
	// MountSMBShare mounts a remote share over SMB on the host at the requested global staging path.
	MountSMBShare(ctx context.Context, in *MountSMBShareRequest, opts ...grpc.CallOption) (*MountSMBShareResponse, error)
	// UnmountSMBShare unmounts a SMB remote share that was previously mounted with MountSMBShare.
	UnmountSMBShare(ctx context.Context, in *UnmountSMBShareRequest, opts ...grpc.CallOption) (*UnmountSMBShareResponse, error)
}

type smbCSIProxyServiceClient struct {
	cc *grpc.ClientConn
}

func NewSmbCSIProxyServiceClient(cc *grpc.ClientConn) SmbCSIProxyServiceClient {
	return &smbCSIProxyServiceClient{cc}
}

func (c *smbCSIProxyServiceClient) MountSMBShare(ctx context.Context, in *MountSMBShareRequest, opts ...grpc.CallOption) (*MountSMBShareResponse, error) {
	out := new(MountSMBShareResponse)
	err := c.cc.Invoke(ctx, "/api.SmbCSIProxyService/MountSMBShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smbCSIProxyServiceClient) UnmountSMBShare(ctx context.Context, in *UnmountSMBShareRequest, opts ...grpc.CallOption) (*UnmountSMBShareResponse, error) {
	out := new(UnmountSMBShareResponse)
	err := c.cc.Invoke(ctx, "/api.SmbCSIProxyService/UnmountSMBShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmbCSIProxyServiceServer is the server API for SmbCSIProxyService service.
type SmbCSIProxyServiceServer interface {
	// MountSMBShare mounts a remote share over SMB on the host at the requested global staging path.
	MountSMBShare(context.Context, *MountSMBShareRequest) (*MountSMBShareResponse, error)
	// UnmountSMBShare unmounts a SMB remote share that was previously mounted with MountSMBShare.
	UnmountSMBShare(context.Context, *UnmountSMBShareRequest) (*UnmountSMBShareResponse, error)
}

// UnimplementedSmbCSIProxyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSmbCSIProxyServiceServer struct {
}

func (*UnimplementedSmbCSIProxyServiceServer) MountSMBShare(ctx context.Context, req *MountSMBShareRequest) (*MountSMBShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountSMBShare not implemented")
}
func (*UnimplementedSmbCSIProxyServiceServer) UnmountSMBShare(ctx context.Context, req *UnmountSMBShareRequest) (*UnmountSMBShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmountSMBShare not implemented")
}

func RegisterSmbCSIProxyServiceServer(s *grpc.Server, srv SmbCSIProxyServiceServer) {
	s.RegisterService(&_SmbCSIProxyService_serviceDesc, srv)
}

func _SmbCSIProxyService_MountSMBShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountSMBShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmbCSIProxyServiceServer).MountSMBShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SmbCSIProxyService/MountSMBShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmbCSIProxyServiceServer).MountSMBShare(ctx, req.(*MountSMBShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmbCSIProxyService_UnmountSMBShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountSMBShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmbCSIProxyServiceServer).UnmountSMBShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SmbCSIProxyService/UnmountSMBShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmbCSIProxyServiceServer).UnmountSMBShare(ctx, req.(*UnmountSMBShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SmbCSIProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.SmbCSIProxyService",
	HandlerType: (*SmbCSIProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MountSMBShare",
			Handler:    _SmbCSIProxyService_MountSMBShare_Handler,
		},
		{
			MethodName: "UnmountSMBShare",
			Handler:    _SmbCSIProxyService_UnmountSMBShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smb.proto",
}
