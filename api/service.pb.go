// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	api "github.com/kubernetes-csi/csi-proxy/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x5b, 0x6f, 0xd3, 0x3e,
	0x14, 0xff, 0xbf, 0xfc, 0x27, 0x64, 0x76, 0xf5, 0x2e, 0x6c, 0xdd, 0x04, 0x6c, 0x0c, 0x09, 0x09,
	0xcd, 0xd5, 0xd8, 0x03, 0x02, 0x69, 0x12, 0xb0, 0xb2, 0x29, 0x52, 0x2b, 0xaa, 0x04, 0xf1, 0xc2,
	0xc3, 0xe4, 0xa6, 0x87, 0xcc, 0xb4, 0xb1, 0x83, 0x8f, 0x33, 0x6d, 0x7c, 0x4a, 0x3e, 0x12, 0x4a,
	0xbb, 0xe3, 0x26, 0x6d, 0x56, 0xf6, 0x94, 0x9c, 0xdf, 0xb5, 0xb6, 0xe5, 0x86, 0x2d, 0x21, 0xd8,
	0x6b, 0x15, 0x83, 0xc8, 0xac, 0x71, 0xa6, 0xf1, 0x2e, 0x51, 0xee, 0x2a, 0xef, 0x89, 0xd8, 0xa4,
	0xcd, 0x41, 0xde, 0x03, 0xab, 0xc1, 0x01, 0x1e, 0xc5, 0xa8, 0x9a, 0x31, 0xaa, 0xa3, 0xcc, 0x9a,
	0x9b, 0xdb, 0xa6, 0xcc, 0x54, 0xf3, 0x87, 0x1a, 0xc2, 0x25, 0xde, 0xa2, 0x83, 0xf4, 0xce, 0x7a,
	0xfa, 0x50, 0x6b, 0x02, 0x1a, 0xac, 0x1c, 0x5e, 0xa2, 0x33, 0x56, 0x26, 0xd4, 0x7c, 0xf2, 0x50,
	0xbb, 0xc2, 0x18, 0xd5, 0x9d, 0xe9, 0xf8, 0xa1, 0x26, 0x4c, 0x7b, 0x63, 0xcb, 0x9b, 0x3f, 0x8b,
	0x6c, 0xe5, 0x2c, 0x0a, 0xba, 0x05, 0x15, 0x8d, 0xd7, 0xce, 0xdf, 0x32, 0xd6, 0x95, 0xee, 0xea,
	0xf3, 0x8d, 0x42, 0x87, 0x9c, 0x8b, 0xc9, 0x10, 0xc2, 0xaf, 0x1c, 0xd0, 0x35, 0xd6, 0x2b, 0x18,
	0x66, 0x46, 0x23, 0x1c, 0xfc, 0xc7, 0x5f, 0xb1, 0xff, 0x3b, 0x83, 0xbe, 0xb2, 0x7c, 0x49, 0x8c,
	0x9e, 0x24, 0x5f, 0xa6, 0xb1, 0xac, 0x0c, 0xd3, 0xb1, 0x72, 0xf4, 0x9c, 0x28, 0xef, 0x46, 0xaf,
	0x3c, 0x66, 0x8f, 0xda, 0x4a, 0x0f, 0x8a, 0x3e, 0xbe, 0x2a, 0xe8, 0x95, 0xf4, 0x6b, 0x25, 0xc4,
	0x5b, 0x5e, 0xb3, 0x85, 0x10, 0x30, 0x96, 0x9a, 0x2f, 0x8b, 0xf1, 0x0b, 0xc9, 0x57, 0xfc, 0xec,
	0xc5, 0x1f, 0xd8, 0x52, 0x57, 0x5a, 0xa7, 0x9c, 0x32, 0xba, 0xa5, 0x70, 0xc0, 0x37, 0x45, 0x65,
	0x26, 0xeb, 0xd6, 0x34, 0xec, 0x13, 0x4e, 0xd9, 0xe2, 0xb9, 0xb1, 0xa9, 0x74, 0xdf, 0xcc, 0x30,
	0x4f, 0x81, 0x6f, 0x88, 0xf2, 0x48, 0xfe, 0xcd, 0x29, 0xd4, 0xdb, 0xdb, 0x6c, 0xad, 0xad, 0xd0,
	0x15, 0xa1, 0x6d, 0x13, 0xcb, 0xa2, 0x00, 0xf9, 0x8e, 0x98, 0xc1, 0x28, 0xa8, 0x51, 0x47, 0xf9,
	0xb4, 0xf7, 0xec, 0x31, 0xd1, 0x41, 0x0b, 0xf9, 0xba, 0x28, 0x4d, 0x94, 0xb0, 0x51, 0x05, 0xbd,
	0xf7, 0x3b, 0xdb, 0x22, 0x62, 0xfc, 0x2b, 0x3b, 0x32, 0xcb, 0x94, 0x4e, 0x90, 0x3f, 0x15, 0xf5,
	0x04, 0x25, 0x3e, 0xbb, 0x97, 0x2f, 0xef, 0x52, 0x08, 0xa8, 0x7e, 0x83, 0xdf, 0xa5, 0xf2, 0x38,
	0xd9, 0xa5, 0x2a, 0xea, 0xed, 0x67, 0x6c, 0xb9, 0xa5, 0x30, 0x35, 0xb9, 0xa6, 0x6d, 0xde, 0x12,
	0x55, 0x80, 0x22, 0x9e, 0xcc, 0xe0, 0xe5, 0xb3, 0xee, 0x14, 0x44, 0xd4, 0xf9, 0x14, 0x5d, 0x49,
	0x0b, 0x7c, 0x53, 0x54, 0xe6, 0xc9, 0x59, 0x4f, 0xc1, 0x33, 0x09, 0x41, 0x74, 0x16, 0x05, 0xed,
	0x5c, 0x53, 0x02, 0xcd, 0x53, 0x09, 0x13, 0xd8, 0x27, 0xa4, 0x6c, 0x2f, 0x84, 0xcc, 0x58, 0x17,
	0x44, 0x31, 0xaa, 0x08, 0x74, 0xff, 0xab, 0xb4, 0x09, 0xb8, 0xae, 0xb1, 0x4e, 0x0e, 0x91, 0x1f,
	0x8a, 0x79, 0x34, 0xe5, 0xbf, 0xfc, 0x87, 0xca, 0xd7, 0x49, 0xb6, 0xfd, 0xb1, 0xdf, 0xaf, 0x95,
	0xf1, 0xe7, 0xe2, 0x3e, 0x8a, 0x6a, 0xf6, 0xe7, 0x28, 0x7c, 0xc5, 0x4f, 0xb6, 0x1b, 0x42, 0x6a,
	0xae, 0xa1, 0xbe, 0xe5, 0x85, 0x98, 0xc3, 0x52, 0xd1, 0xe1, 0x7c, 0x91, 0xef, 0xfa, 0xc2, 0x78,
	0x69, 0xe1, 0x63, 0x11, 0xf2, 0x86, 0x98, 0x05, 0x29, 0x79, 0xb7, 0x96, 0xf3, 0x81, 0x01, 0x5b,
	0x6d, 0x9b, 0x44, 0xe9, 0x00, 0x3d, 0xcd, 0xb7, 0xc5, 0x34, 0x44, 0x61, 0x3b, 0x35, 0x4c, 0xe5,
	0x22, 0x9b, 0xc4, 0xe4, 0xe5, 0x2a, 0x3e, 0x72, 0x54, 0xb1, 0xd2, 0x45, 0x9e, 0xa5, 0x7c, 0x5a,
	0xc8, 0xd6, 0x2f, 0x80, 0xce, 0x17, 0x51, 0x19, 0x5d, 0x5c, 0x31, 0xbe, 0x2b, 0x6a, 0x50, 0x4a,
	0xdc, 0xab, 0x27, 0x7d, 0x66, 0x9f, 0xed, 0x5c, 0x80, 0x6b, 0x41, 0xf1, 0x2f, 0x8f, 0xe7, 0xc6,
	0x96, 0xa5, 0x7c, 0x5f, 0xdc, 0xcb, 0x51, 0xfe, 0xc1, 0x3c, 0x09, 0xb5, 0xf4, 0x16, 0x46, 0x5f,
	0x96, 0x93, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3c, 0x86, 0xa2, 0x4c, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CSIProxyServiceClient is the client API for CSIProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CSIProxyServiceClient interface {
	// PathExists checks if the given path exists on the host.
	PathExists(ctx context.Context, in *api.PathExistsRequest, opts ...grpc.CallOption) (*api.PathExistsResponse, error)
	// Mkdir creates a directory at the requested path on the host.
	Mkdir(ctx context.Context, in *api.MkdirRequest, opts ...grpc.CallOption) (*api.MkdirResponse, error)
	// Rmdir removes the directory at the requested path on the host.
	// This may be used for unlinking a symlink created through LinkVolume.
	Rmdir(ctx context.Context, in *api.RmdirRequest, opts ...grpc.CallOption) (*api.RmdirResponse, error)
	// LinkPath invokes mklink on the global staging path of a volume linking it to a path within a container.
	LinkPath(ctx context.Context, in *api.LinkPathRequest, opts ...grpc.CallOption) (*api.LinkPathResponse, error)
	// Rescan refreshes the host storage cache.
	Rescan(ctx context.Context, in *api.RescanRequest, opts ...grpc.CallOption) (*api.RescanResponse, error)
	// PartitionDisk initializes and partitions a disk device (if the disk has not
	// been partitioned already) and returns the resulting volume object's GUID.
	PartitionDisk(ctx context.Context, in *api.PartitionDiskRequest, opts ...grpc.CallOption) (*api.PartitionDiskResponse, error)
	// FormatVolume formats a volume with the provided file system.
	// The resulting volume is mounted at the requested global staging path.
	FormatVolume(ctx context.Context, in *api.FormatVolumeRequest, opts ...grpc.CallOption) (*api.FormatVolumeResponse, error)
	// ListDiskLocations returns locations <Adapter, Bus, Target, LUN ID> of all disk devices enumerated by Windows.
	ListDiskLocations(ctx context.Context, in *api.ListDiskLocationsRequest, opts ...grpc.CallOption) (*api.ListDiskLocationsResponse, error)
	// ListDiskIDs returns all IDs (from IOCTL_STORAGE_QUERY_PROPERTY) of all disk devices enumerated by Windows.
	ListDiskIDs(ctx context.Context, in *api.ListDiskIDsRequest, opts ...grpc.CallOption) (*api.ListDiskIDsResponse, error)
	// ListDiskVolumeMappings returns a map of all disk devices and volumes GUIDs
	ListDiskVolumeMappings(ctx context.Context, in *api.ListDiskVolumeMappingsRequest, opts ...grpc.CallOption) (*api.ListDiskVolumeMappingsResponse, error)
	// ResizeVolume performs resizing of the partition and file system for a block based volume
	ResizeVolume(ctx context.Context, in *api.ResizeVolumeRequest, opts ...grpc.CallOption) (*api.ResizeVolumeResponse, error)
	// DismountVolume gracefully dismounts a volume
	DismountVolume(ctx context.Context, in *api.DismountVolumeRequest, opts ...grpc.CallOption) (*api.DismountVolumeResponse, error)
	// MountSMBShare mounts a remote share over SMB on the host at the requested global staging path.
	MountSMBShare(ctx context.Context, in *api.MountSMBShareRequest, opts ...grpc.CallOption) (*api.MountSMBShareResponse, error)
	// MountISCSILun mounts a remote LUN over iSCSI and returns the OS disk device number.
	MountISCSILun(ctx context.Context, in *api.MountISCSILunRequest, opts ...grpc.CallOption) (*api.MountISCSILunResponse, error)
	// ReportIScsiSendTargetPortals retrieves a list of static target portals that the iSCSI initiator
	// service uses to perform automatic discovery with SendTarget requests.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-reportiscsisendtargetportalsexw
	ReportIScsiSendTargetPortals(ctx context.Context, in *api.ReportIScsiSendTargetPortalsRequest, opts ...grpc.CallOption) (*api.ReportIScsiSendTargetPortalsResponse, error)
	// AddIScsiSendTargetPortal adds a static target portal to the list of target portals to which the iSCSI initiator service transmits SendTargets requests.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-addiscsisendtargetportalw
	AddIScsiSendTargetPortal(ctx context.Context, in *api.AddIScsiSendTargetPortalRequest, opts ...grpc.CallOption) (*api.AddIScsiSendTargetPortalResponse, error)
	// RemoveIScsiSendTargetPortal removes a portal from the list of portals to which the iSCSI initiator service sends
	// SendTargets requests for target discovery.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-removeiscsisendtargetportalw
	RemoveIScsiSendTargetPortal(ctx context.Context, in *api.RemoveIScsiSendTargetPortalRequest, opts ...grpc.CallOption) (*api.RemoveIScsiSendTargetPortalResponse, error)
	// ReportIScsiTargets retrieves the list of targets that the iSCSI initiator service has discovered.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-reportiscsitargetsw
	ReportIScsiTargets(ctx context.Context, in *api.ReportIScsiTargetsRequest, opts ...grpc.CallOption) (*api.ReportIScsiTargetsResponse, error)
	// LoginIscsiTarget establishes a full featured login session with the indicated target.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-loginiscsitargetw
	LoginIscsiTarget(ctx context.Context, in *api.LoginIscsiTargetRequest, opts ...grpc.CallOption) (*api.LoginIscsiTargetResponse, error)
	// LogoutIScsiTarget closes the specified login session.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-logoutiscsitarget
	LogoutIScsiTarget(ctx context.Context, in *api.LogoutIScsiTargetRequest, opts ...grpc.CallOption) (*api.LogoutIScsiTargetResponse, error)
	// GetIScsiSessionList retrieves the list of active iSCSI sessions.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-getiscsisessionlistw
	GetIScsiSessionList(ctx context.Context, in *api.GetIScsiSessionListRequest, opts ...grpc.CallOption) (*api.GetIScsiSessionListResponse, error)
	// GetDevicesForIScsiSession retrieves information about the devices associated with an existing session.
	// see https://docs.microsoft.com/en-us/windows/win32/api/iscsidsc/nf-iscsidsc-getdevicesforiscsisessionw
	GetDevicesForIScsiSession(ctx context.Context, in *api.GetDevicesForIScsiSessionRequest, opts ...grpc.CallOption) (*api.GetDevicesForIScsiSessionResponse, error)
}

type cSIProxyServiceClient struct {
	cc *grpc.ClientConn
}

func NewCSIProxyServiceClient(cc *grpc.ClientConn) CSIProxyServiceClient {
	return &cSIProxyServiceClient{cc}
}

func (c *cSIProxyServiceClient) PathExists(ctx context.Context, in *api.PathExistsRequest, opts ...grpc.CallOption) (*api.PathExistsResponse, error) {
	out := new(api.PathExistsResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/PathExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) Mkdir(ctx context.Context, in *api.MkdirRequest, opts ...grpc.CallOption) (*api.MkdirResponse, error) {
	out := new(api.MkdirResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/Mkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) Rmdir(ctx context.Context, in *api.RmdirRequest, opts ...grpc.CallOption) (*api.RmdirResponse, error) {
	out := new(api.RmdirResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/Rmdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) LinkPath(ctx context.Context, in *api.LinkPathRequest, opts ...grpc.CallOption) (*api.LinkPathResponse, error) {
	out := new(api.LinkPathResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/LinkPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) Rescan(ctx context.Context, in *api.RescanRequest, opts ...grpc.CallOption) (*api.RescanResponse, error) {
	out := new(api.RescanResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/Rescan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) PartitionDisk(ctx context.Context, in *api.PartitionDiskRequest, opts ...grpc.CallOption) (*api.PartitionDiskResponse, error) {
	out := new(api.PartitionDiskResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/PartitionDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) FormatVolume(ctx context.Context, in *api.FormatVolumeRequest, opts ...grpc.CallOption) (*api.FormatVolumeResponse, error) {
	out := new(api.FormatVolumeResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/FormatVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) ListDiskLocations(ctx context.Context, in *api.ListDiskLocationsRequest, opts ...grpc.CallOption) (*api.ListDiskLocationsResponse, error) {
	out := new(api.ListDiskLocationsResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/ListDiskLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) ListDiskIDs(ctx context.Context, in *api.ListDiskIDsRequest, opts ...grpc.CallOption) (*api.ListDiskIDsResponse, error) {
	out := new(api.ListDiskIDsResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/ListDiskIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) ListDiskVolumeMappings(ctx context.Context, in *api.ListDiskVolumeMappingsRequest, opts ...grpc.CallOption) (*api.ListDiskVolumeMappingsResponse, error) {
	out := new(api.ListDiskVolumeMappingsResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/ListDiskVolumeMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) ResizeVolume(ctx context.Context, in *api.ResizeVolumeRequest, opts ...grpc.CallOption) (*api.ResizeVolumeResponse, error) {
	out := new(api.ResizeVolumeResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/ResizeVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) DismountVolume(ctx context.Context, in *api.DismountVolumeRequest, opts ...grpc.CallOption) (*api.DismountVolumeResponse, error) {
	out := new(api.DismountVolumeResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/DismountVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) MountSMBShare(ctx context.Context, in *api.MountSMBShareRequest, opts ...grpc.CallOption) (*api.MountSMBShareResponse, error) {
	out := new(api.MountSMBShareResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/MountSMBShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) MountISCSILun(ctx context.Context, in *api.MountISCSILunRequest, opts ...grpc.CallOption) (*api.MountISCSILunResponse, error) {
	out := new(api.MountISCSILunResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/MountISCSILun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) ReportIScsiSendTargetPortals(ctx context.Context, in *api.ReportIScsiSendTargetPortalsRequest, opts ...grpc.CallOption) (*api.ReportIScsiSendTargetPortalsResponse, error) {
	out := new(api.ReportIScsiSendTargetPortalsResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/ReportIScsiSendTargetPortals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) AddIScsiSendTargetPortal(ctx context.Context, in *api.AddIScsiSendTargetPortalRequest, opts ...grpc.CallOption) (*api.AddIScsiSendTargetPortalResponse, error) {
	out := new(api.AddIScsiSendTargetPortalResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/AddIScsiSendTargetPortal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) RemoveIScsiSendTargetPortal(ctx context.Context, in *api.RemoveIScsiSendTargetPortalRequest, opts ...grpc.CallOption) (*api.RemoveIScsiSendTargetPortalResponse, error) {
	out := new(api.RemoveIScsiSendTargetPortalResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/RemoveIScsiSendTargetPortal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) ReportIScsiTargets(ctx context.Context, in *api.ReportIScsiTargetsRequest, opts ...grpc.CallOption) (*api.ReportIScsiTargetsResponse, error) {
	out := new(api.ReportIScsiTargetsResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/ReportIScsiTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) LoginIscsiTarget(ctx context.Context, in *api.LoginIscsiTargetRequest, opts ...grpc.CallOption) (*api.LoginIscsiTargetResponse, error) {
	out := new(api.LoginIscsiTargetResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/LoginIscsiTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) LogoutIScsiTarget(ctx context.Context, in *api.LogoutIScsiTargetRequest, opts ...grpc.CallOption) (*api.LogoutIScsiTargetResponse, error) {
	out := new(api.LogoutIScsiTargetResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/LogoutIScsiTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) GetIScsiSessionList(ctx context.Context, in *api.GetIScsiSessionListRequest, opts ...grpc.CallOption) (*api.GetIScsiSessionListResponse, error) {
	out := new(api.GetIScsiSessionListResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/GetIScsiSessionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIProxyServiceClient) GetDevicesForIScsiSession(ctx context.Context, in *api.GetDevicesForIScsiSessionRequest, opts ...grpc.CallOption) (*api.GetDevicesForIScsiSessionResponse, error) {
	out := new(api.GetDevicesForIScsiSessionResponse)
	err := c.cc.Invoke(ctx, "/CSIProxyService/GetDevicesForIScsiSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSIProxyServiceServer is the server API for CSIProxyService service.
type CSIProxyServiceServer interface {
	// PathExists checks if the given path exists on the host.
	PathExists(context.Context, *api.PathExistsRequest) (*api.PathExistsResponse, error)
	// Mkdir creates a directory at the requested path on the host.
	Mkdir(context.Context, *api.MkdirRequest) (*api.MkdirResponse, error)
	// Rmdir removes the directory at the requested path on the host.
	// This may be used for unlinking a symlink created through LinkVolume.
	Rmdir(context.Context, *api.RmdirRequest) (*api.RmdirResponse, error)
	// LinkPath invokes mklink on the global staging path of a volume linking it to a path within a container.
	LinkPath(context.Context, *api.LinkPathRequest) (*api.LinkPathResponse, error)
	// Rescan refreshes the host storage cache.
	Rescan(context.Context, *api.RescanRequest) (*api.RescanResponse, error)
	// PartitionDisk initializes and partitions a disk device (if the disk has not
	// been partitioned already) and returns the resulting volume object's GUID.
	PartitionDisk(context.Context, *api.PartitionDiskRequest) (*api.PartitionDiskResponse, error)
	// FormatVolume formats a volume with the provided file system.
	// The resulting volume is mounted at the requested global staging path.
	FormatVolume(context.Context, *api.FormatVolumeRequest) (*api.FormatVolumeResponse, error)
	// ListDiskLocations returns locations <Adapter, Bus, Target, LUN ID> of all disk devices enumerated by Windows.
	ListDiskLocations(context.Context, *api.ListDiskLocationsRequest) (*api.ListDiskLocationsResponse, error)
	// ListDiskIDs returns all IDs (from IOCTL_STORAGE_QUERY_PROPERTY) of all disk devices enumerated by Windows.
	ListDiskIDs(context.Context, *api.ListDiskIDsRequest) (*api.ListDiskIDsResponse, error)
	// ListDiskVolumeMappings returns a map of all disk devices and volumes GUIDs
	ListDiskVolumeMappings(context.Context, *api.ListDiskVolumeMappingsRequest) (*api.ListDiskVolumeMappingsResponse, error)
	// ResizeVolume performs resizing of the partition and file system for a block based volume
	ResizeVolume(context.Context, *api.ResizeVolumeRequest) (*api.ResizeVolumeResponse, error)
	// DismountVolume gracefully dismounts a volume
	DismountVolume(context.Context, *api.DismountVolumeRequest) (*api.DismountVolumeResponse, error)
	// MountSMBShare mounts a remote share over SMB on the host at the requested global staging path.
	MountSMBShare(context.Context, *api.MountSMBShareRequest) (*api.MountSMBShareResponse, error)
	// MountISCSILun mounts a remote LUN over iSCSI and returns the OS disk device number.
	MountISCSILun(context.Context, *api.MountISCSILunRequest) (*api.MountISCSILunResponse, error)
	// ReportIScsiSendTargetPortals retrieves a list of static target portals that the iSCSI initiator
	// service uses to perform automatic discovery with SendTarget requests.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-reportiscsisendtargetportalsexw
	ReportIScsiSendTargetPortals(context.Context, *api.ReportIScsiSendTargetPortalsRequest) (*api.ReportIScsiSendTargetPortalsResponse, error)
	// AddIScsiSendTargetPortal adds a static target portal to the list of target portals to which the iSCSI initiator service transmits SendTargets requests.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-addiscsisendtargetportalw
	AddIScsiSendTargetPortal(context.Context, *api.AddIScsiSendTargetPortalRequest) (*api.AddIScsiSendTargetPortalResponse, error)
	// RemoveIScsiSendTargetPortal removes a portal from the list of portals to which the iSCSI initiator service sends
	// SendTargets requests for target discovery.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-removeiscsisendtargetportalw
	RemoveIScsiSendTargetPortal(context.Context, *api.RemoveIScsiSendTargetPortalRequest) (*api.RemoveIScsiSendTargetPortalResponse, error)
	// ReportIScsiTargets retrieves the list of targets that the iSCSI initiator service has discovered.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-reportiscsitargetsw
	ReportIScsiTargets(context.Context, *api.ReportIScsiTargetsRequest) (*api.ReportIScsiTargetsResponse, error)
	// LoginIscsiTarget establishes a full featured login session with the indicated target.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-loginiscsitargetw
	LoginIscsiTarget(context.Context, *api.LoginIscsiTargetRequest) (*api.LoginIscsiTargetResponse, error)
	// LogoutIScsiTarget closes the specified login session.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-logoutiscsitarget
	LogoutIScsiTarget(context.Context, *api.LogoutIScsiTargetRequest) (*api.LogoutIScsiTargetResponse, error)
	// GetIScsiSessionList retrieves the list of active iSCSI sessions.
	// see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-getiscsisessionlistw
	GetIScsiSessionList(context.Context, *api.GetIScsiSessionListRequest) (*api.GetIScsiSessionListResponse, error)
	// GetDevicesForIScsiSession retrieves information about the devices associated with an existing session.
	// see https://docs.microsoft.com/en-us/windows/win32/api/iscsidsc/nf-iscsidsc-getdevicesforiscsisessionw
	GetDevicesForIScsiSession(context.Context, *api.GetDevicesForIScsiSessionRequest) (*api.GetDevicesForIScsiSessionResponse, error)
}

// UnimplementedCSIProxyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCSIProxyServiceServer struct {
}

func (*UnimplementedCSIProxyServiceServer) PathExists(ctx context.Context, req *api.PathExistsRequest) (*api.PathExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PathExists not implemented")
}
func (*UnimplementedCSIProxyServiceServer) Mkdir(ctx context.Context, req *api.MkdirRequest) (*api.MkdirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (*UnimplementedCSIProxyServiceServer) Rmdir(ctx context.Context, req *api.RmdirRequest) (*api.RmdirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rmdir not implemented")
}
func (*UnimplementedCSIProxyServiceServer) LinkPath(ctx context.Context, req *api.LinkPathRequest) (*api.LinkPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkPath not implemented")
}
func (*UnimplementedCSIProxyServiceServer) Rescan(ctx context.Context, req *api.RescanRequest) (*api.RescanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rescan not implemented")
}
func (*UnimplementedCSIProxyServiceServer) PartitionDisk(ctx context.Context, req *api.PartitionDiskRequest) (*api.PartitionDiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionDisk not implemented")
}
func (*UnimplementedCSIProxyServiceServer) FormatVolume(ctx context.Context, req *api.FormatVolumeRequest) (*api.FormatVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormatVolume not implemented")
}
func (*UnimplementedCSIProxyServiceServer) ListDiskLocations(ctx context.Context, req *api.ListDiskLocationsRequest) (*api.ListDiskLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiskLocations not implemented")
}
func (*UnimplementedCSIProxyServiceServer) ListDiskIDs(ctx context.Context, req *api.ListDiskIDsRequest) (*api.ListDiskIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiskIDs not implemented")
}
func (*UnimplementedCSIProxyServiceServer) ListDiskVolumeMappings(ctx context.Context, req *api.ListDiskVolumeMappingsRequest) (*api.ListDiskVolumeMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiskVolumeMappings not implemented")
}
func (*UnimplementedCSIProxyServiceServer) ResizeVolume(ctx context.Context, req *api.ResizeVolumeRequest) (*api.ResizeVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeVolume not implemented")
}
func (*UnimplementedCSIProxyServiceServer) DismountVolume(ctx context.Context, req *api.DismountVolumeRequest) (*api.DismountVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DismountVolume not implemented")
}
func (*UnimplementedCSIProxyServiceServer) MountSMBShare(ctx context.Context, req *api.MountSMBShareRequest) (*api.MountSMBShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountSMBShare not implemented")
}
func (*UnimplementedCSIProxyServiceServer) MountISCSILun(ctx context.Context, req *api.MountISCSILunRequest) (*api.MountISCSILunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountISCSILun not implemented")
}
func (*UnimplementedCSIProxyServiceServer) ReportIScsiSendTargetPortals(ctx context.Context, req *api.ReportIScsiSendTargetPortalsRequest) (*api.ReportIScsiSendTargetPortalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportIScsiSendTargetPortals not implemented")
}
func (*UnimplementedCSIProxyServiceServer) AddIScsiSendTargetPortal(ctx context.Context, req *api.AddIScsiSendTargetPortalRequest) (*api.AddIScsiSendTargetPortalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIScsiSendTargetPortal not implemented")
}
func (*UnimplementedCSIProxyServiceServer) RemoveIScsiSendTargetPortal(ctx context.Context, req *api.RemoveIScsiSendTargetPortalRequest) (*api.RemoveIScsiSendTargetPortalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIScsiSendTargetPortal not implemented")
}
func (*UnimplementedCSIProxyServiceServer) ReportIScsiTargets(ctx context.Context, req *api.ReportIScsiTargetsRequest) (*api.ReportIScsiTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportIScsiTargets not implemented")
}
func (*UnimplementedCSIProxyServiceServer) LoginIscsiTarget(ctx context.Context, req *api.LoginIscsiTargetRequest) (*api.LoginIscsiTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginIscsiTarget not implemented")
}
func (*UnimplementedCSIProxyServiceServer) LogoutIScsiTarget(ctx context.Context, req *api.LogoutIScsiTargetRequest) (*api.LogoutIScsiTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutIScsiTarget not implemented")
}
func (*UnimplementedCSIProxyServiceServer) GetIScsiSessionList(ctx context.Context, req *api.GetIScsiSessionListRequest) (*api.GetIScsiSessionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIScsiSessionList not implemented")
}
func (*UnimplementedCSIProxyServiceServer) GetDevicesForIScsiSession(ctx context.Context, req *api.GetDevicesForIScsiSessionRequest) (*api.GetDevicesForIScsiSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesForIScsiSession not implemented")
}

func RegisterCSIProxyServiceServer(s *grpc.Server, srv CSIProxyServiceServer) {
	s.RegisterService(&_CSIProxyService_serviceDesc, srv)
}

func _CSIProxyService_PathExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.PathExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).PathExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/PathExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).PathExists(ctx, req.(*api.PathExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.MkdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).Mkdir(ctx, req.(*api.MkdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_Rmdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.RmdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).Rmdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/Rmdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).Rmdir(ctx, req.(*api.RmdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_LinkPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.LinkPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).LinkPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/LinkPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).LinkPath(ctx, req.(*api.LinkPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_Rescan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.RescanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).Rescan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/Rescan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).Rescan(ctx, req.(*api.RescanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_PartitionDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.PartitionDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).PartitionDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/PartitionDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).PartitionDisk(ctx, req.(*api.PartitionDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_FormatVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.FormatVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).FormatVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/FormatVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).FormatVolume(ctx, req.(*api.FormatVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_ListDiskLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListDiskLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).ListDiskLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/ListDiskLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).ListDiskLocations(ctx, req.(*api.ListDiskLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_ListDiskIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListDiskIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).ListDiskIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/ListDiskIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).ListDiskIDs(ctx, req.(*api.ListDiskIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_ListDiskVolumeMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListDiskVolumeMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).ListDiskVolumeMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/ListDiskVolumeMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).ListDiskVolumeMappings(ctx, req.(*api.ListDiskVolumeMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_ResizeVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ResizeVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).ResizeVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/ResizeVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).ResizeVolume(ctx, req.(*api.ResizeVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_DismountVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.DismountVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).DismountVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/DismountVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).DismountVolume(ctx, req.(*api.DismountVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_MountSMBShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.MountSMBShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).MountSMBShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/MountSMBShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).MountSMBShare(ctx, req.(*api.MountSMBShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_MountISCSILun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.MountISCSILunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).MountISCSILun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/MountISCSILun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).MountISCSILun(ctx, req.(*api.MountISCSILunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_ReportIScsiSendTargetPortals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ReportIScsiSendTargetPortalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).ReportIScsiSendTargetPortals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/ReportIScsiSendTargetPortals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).ReportIScsiSendTargetPortals(ctx, req.(*api.ReportIScsiSendTargetPortalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_AddIScsiSendTargetPortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.AddIScsiSendTargetPortalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).AddIScsiSendTargetPortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/AddIScsiSendTargetPortal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).AddIScsiSendTargetPortal(ctx, req.(*api.AddIScsiSendTargetPortalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_RemoveIScsiSendTargetPortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.RemoveIScsiSendTargetPortalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).RemoveIScsiSendTargetPortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/RemoveIScsiSendTargetPortal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).RemoveIScsiSendTargetPortal(ctx, req.(*api.RemoveIScsiSendTargetPortalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_ReportIScsiTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ReportIScsiTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).ReportIScsiTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/ReportIScsiTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).ReportIScsiTargets(ctx, req.(*api.ReportIScsiTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_LoginIscsiTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.LoginIscsiTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).LoginIscsiTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/LoginIscsiTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).LoginIscsiTarget(ctx, req.(*api.LoginIscsiTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_LogoutIScsiTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.LogoutIScsiTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).LogoutIScsiTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/LogoutIScsiTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).LogoutIScsiTarget(ctx, req.(*api.LogoutIScsiTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_GetIScsiSessionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GetIScsiSessionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).GetIScsiSessionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/GetIScsiSessionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).GetIScsiSessionList(ctx, req.(*api.GetIScsiSessionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIProxyService_GetDevicesForIScsiSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GetDevicesForIScsiSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIProxyServiceServer).GetDevicesForIScsiSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSIProxyService/GetDevicesForIScsiSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIProxyServiceServer).GetDevicesForIScsiSession(ctx, req.(*api.GetDevicesForIScsiSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CSIProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CSIProxyService",
	HandlerType: (*CSIProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PathExists",
			Handler:    _CSIProxyService_PathExists_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _CSIProxyService_Mkdir_Handler,
		},
		{
			MethodName: "Rmdir",
			Handler:    _CSIProxyService_Rmdir_Handler,
		},
		{
			MethodName: "LinkPath",
			Handler:    _CSIProxyService_LinkPath_Handler,
		},
		{
			MethodName: "Rescan",
			Handler:    _CSIProxyService_Rescan_Handler,
		},
		{
			MethodName: "PartitionDisk",
			Handler:    _CSIProxyService_PartitionDisk_Handler,
		},
		{
			MethodName: "FormatVolume",
			Handler:    _CSIProxyService_FormatVolume_Handler,
		},
		{
			MethodName: "ListDiskLocations",
			Handler:    _CSIProxyService_ListDiskLocations_Handler,
		},
		{
			MethodName: "ListDiskIDs",
			Handler:    _CSIProxyService_ListDiskIDs_Handler,
		},
		{
			MethodName: "ListDiskVolumeMappings",
			Handler:    _CSIProxyService_ListDiskVolumeMappings_Handler,
		},
		{
			MethodName: "ResizeVolume",
			Handler:    _CSIProxyService_ResizeVolume_Handler,
		},
		{
			MethodName: "DismountVolume",
			Handler:    _CSIProxyService_DismountVolume_Handler,
		},
		{
			MethodName: "MountSMBShare",
			Handler:    _CSIProxyService_MountSMBShare_Handler,
		},
		{
			MethodName: "MountISCSILun",
			Handler:    _CSIProxyService_MountISCSILun_Handler,
		},
		{
			MethodName: "ReportIScsiSendTargetPortals",
			Handler:    _CSIProxyService_ReportIScsiSendTargetPortals_Handler,
		},
		{
			MethodName: "AddIScsiSendTargetPortal",
			Handler:    _CSIProxyService_AddIScsiSendTargetPortal_Handler,
		},
		{
			MethodName: "RemoveIScsiSendTargetPortal",
			Handler:    _CSIProxyService_RemoveIScsiSendTargetPortal_Handler,
		},
		{
			MethodName: "ReportIScsiTargets",
			Handler:    _CSIProxyService_ReportIScsiTargets_Handler,
		},
		{
			MethodName: "LoginIscsiTarget",
			Handler:    _CSIProxyService_LoginIscsiTarget_Handler,
		},
		{
			MethodName: "LogoutIScsiTarget",
			Handler:    _CSIProxyService_LogoutIScsiTarget_Handler,
		},
		{
			MethodName: "GetIScsiSessionList",
			Handler:    _CSIProxyService_GetIScsiSessionList_Handler,
		},
		{
			MethodName: "GetDevicesForIScsiSession",
			Handler:    _CSIProxyService_GetDevicesForIScsiSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
