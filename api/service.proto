syntax = "proto3";

import "github.com/kubernetes-csi/csi-proxy/api/file_system.proto";
import "github.com/kubernetes-csi/csi-proxy/api/general_storage.proto";
import "github.com/kubernetes-csi/csi-proxy/api/iscsi.proto";
import "github.com/kubernetes-csi/csi-proxy/api/smb.proto";

service CSIProxyService {
    // ********************** //
    // File system operations //
    // ********************** //

    // PathExists checks if the given path exists on the host.
    rpc PathExists(PathExistsRequest) returns (PathExistsResponse) {}

    // Mkdir creates a directory at the requested path on the host.
    rpc Mkdir(MkdirRequest) returns (MkdirResponse) {}

    // Rmdir removes the directory at the requested path on the host.
    // This may be used for unlinking a symlink created through LinkVolume.
    rpc Rmdir(RmdirRequest) returns (RmdirResponse) {}

    // LinkPath invokes mklink on the global staging path of a volume linking it to a path within a container.
    rpc LinkPath(LinkPathRequest) returns (LinkPathResponse) {}

    // ********************************* //
    // General storage/volume operations //
    // ********************************* //

    // Rescan refreshes the host storage cache.
    rpc Rescan(RescanRequest) returns (RescanResponse) {}

    // PartitionDisk initializes and partitions a disk device (if the disk has not
    // been partitioned already) and returns the resulting volume object's GUID.
    rpc PartitionDisk(PartitionDiskRequest) returns (PartitionDiskResponse) {}

    // FormatVolume formats a volume with the provided file system.
    // The resulting volume is mounted at the requested global staging path.
    rpc FormatVolume(FormatVolumeRequest) returns (FormatVolumeResponse) {}

    // ListDiskLocations returns locations <Adapter, Bus, Target, LUN ID> of all disk devices enumerated by Windows.
    rpc ListDiskLocations(ListDiskLocationsRequest) returns (ListDiskLocationsResponse) {}

    // ListDiskIDs returns all IDs (from IOCTL_STORAGE_QUERY_PROPERTY) of all disk devices enumerated by Windows.
    rpc ListDiskIDs(ListDiskIDsRequest) returns (ListDiskIDsResponse) {}

    // ListDiskVolumeMappings returns a map of all disk devices and volumes GUIDs
    rpc ListDiskVolumeMappings(ListDiskVolumeMappingsRequest) returns (ListDiskVolumeMappingsResponse) {}

    // ResizeVolume performs resizing of the partition and file system for a block based volume
    rpc ResizeVolume(ResizeVolumeRequest) returns (ResizeVolumeResponse) {}

    // DismountVolume gracefully dismounts a volume
    rpc DismountVolume(DismountVolumeRequest) returns (DismountVolumeResponse) {}

    // ************** //
    // SMB operations //
    // ************** //

    // MountSMBShare mounts a remote share over SMB on the host at the requested global staging path.
    rpc MountSMBShare(MountSMBShareRequest) returns (MountSMBShareResponse) {}

    // **************** //
    // iSCSI operations //
    // **************** //

    // MountISCSILun mounts a remote LUN over iSCSI and returns the OS disk device number.
    rpc MountISCSILun(MountISCSILunRequest) returns (MountISCSILunResponse) {}

    // ReportIScsiSendTargetPortals retrieves a list of static target portals that the iSCSI initiator
    // service uses to perform automatic discovery with SendTarget requests.
    // see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-reportiscsisendtargetportalsexw
    rpc ReportIScsiSendTargetPortals(ReportIScsiSendTargetPortalsRequest) returns (ReportIScsiSendTargetPortalsResponse) {}

    // AddIScsiSendTargetPortal adds a static target portal to the list of target portals to which the iSCSI initiator service transmits SendTargets requests.
    // see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-addiscsisendtargetportalw
    rpc AddIScsiSendTargetPortal(AddIScsiSendTargetPortalRequest) returns (AddIScsiSendTargetPortalResponse) {}

    // RemoveIScsiSendTargetPortal removes a portal from the list of portals to which the iSCSI initiator service sends
    // SendTargets requests for target discovery.
    // see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-removeiscsisendtargetportalw
    rpc RemoveIScsiSendTargetPortal(RemoveIScsiSendTargetPortalRequest) returns (RemoveIScsiSendTargetPortalResponse) {}

    // ReportIScsiTargets retrieves the list of targets that the iSCSI initiator service has discovered.
    // see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-reportiscsitargetsw
    rpc ReportIScsiTargets(ReportIScsiTargetsRequest) returns (ReportIScsiTargetsResponse) {}

    // LoginIscsiTarget establishes a full featured login session with the indicated target.
    // see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-loginiscsitargetw
    rpc LoginIscsiTarget(LoginIscsiTargetRequest) returns (LoginIscsiTargetResponse) {}

    // LogoutIScsiTarget closes the specified login session.
    // see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-logoutiscsitarget
    rpc LogoutIScsiTarget(LogoutIScsiTargetRequest) returns (LogoutIScsiTargetResponse) {}

    // GetIScsiSessionList retrieves the list of active iSCSI sessions.
    // see https://docs.microsoft.com/en-us/windows/desktop/api/iscsidsc/nf-iscsidsc-getiscsisessionlistw
    rpc GetIScsiSessionList(GetIScsiSessionListRequest) returns (GetIScsiSessionListResponse) {}

    // GetDevicesForIScsiSession retrieves information about the devices associated with an existing session.
    // see https://docs.microsoft.com/en-us/windows/win32/api/iscsidsc/nf-iscsidsc-getdevicesforiscsisessionw
    rpc GetDevicesForIScsiSession(GetDevicesForIScsiSessionRequest) returns (GetDevicesForIScsiSessionResponse) {}
}
